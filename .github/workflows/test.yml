name: Test

on:
  push:

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-20.04]
        tarantool:
          - '1.10'
          - '2.4'
          - '2.5'
          - '2.6'
          - '2.7'
          - '2.8'
          - '2.9'
        nightly: [false]
        include:
        - {runs-on: ubuntu-18.04, tarantool: '1.10', nightly: true}
        - {runs-on: ubuntu-16.04, tarantool: '1.10', nightly: true}
    runs-on: ${{ matrix.runs-on }}
    env:
      TARANTOOL_CACHE_KEY_SUFFIX: -A-${{ github.run_id }}
    steps:
      - uses: actions/checkout@v2

      - id: get-latest
        run: |
          node <<'SCRIPT'
            process.env["INPUT_TARANTOOL-VERSION"] = "${{ matrix.tarantool }}"
            process.env["INPUT_NIGHTLY-BUILD"] = "${{ matrix.nightly }}"
            require("./dist/main").latest_version().then(v => {
              console.log(v)
              console.log(`::set-output name=version::${v}`)
            })
          SCRIPT

      - name: Setup from scratch
        uses: ./
        with:
          tarantool-version: ${{ matrix.tarantool }}
          nightly-build: ${{ matrix.nightly }}

      - name: Check precise version
        run: |
          dpkg -s tarantool | grep '^Version: ${{ steps.get-latest.outputs.version }}'
          # It'll also fail if tarantool is installed from cache but not from apt-get

      - name: Uninstall tarantool
        run: sudo apt-get -y remove tarantool tarantool-dev tarantool-common

      - name: Setup from cache
        uses: ./
        with:
          tarantool-version: ${{ matrix.tarantool }}
          nightly-build: ${{ matrix.nightly }}

      - name: Verify install from cache
        run: |
          # Fail if tarantool is installed from apt-get
          if dpkg -s tarantool; then
            echo "Tarantool wasn't restored from cache"
            exit 1
          fi

      - name: Check branch version
        run: |
          T=$(tarantool -e 'print(_TARANTOOL:match("%d+%.%d+")); os.exit()')
          if [ "$T" != "${{ matrix.tarantool }}" ]; then
            echo "Tarantool version is $T, expected ${{ matrix.tarantool }}"
            exit 1
          else
            echo "Tarantool version is $T, as expected"
          fi

  test-concurrency:
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-20.04, ubuntu-20.04, ubuntu-20.04]
    runs-on: ${{ matrix.runs-on }}
    env:
      TARANTOOL_CACHE_KEY_SUFFIX: -B-${{ github.run_id }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Tarantool
        uses: ./
        with:
          tarantool-version: '1.10'
